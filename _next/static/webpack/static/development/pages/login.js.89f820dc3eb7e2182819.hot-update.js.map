{"version":3,"file":"static/webpack/static\\development\\pages\\login.js.89f820dc3eb7e2182819.hot-update.js","sources":["webpack:///./pages/login/index.js"],"sourcesContent":["import React,{Component,Fragment} from 'react';\r\n// import { connect } from \"react-redux\";\r\n\r\nimport {Input,Button} from 'antd';\r\nimport './index.less'\r\nimport WithDva from '../../utils/store';\r\n\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            userName:'张三',\r\n            password:'123456',\r\n        }\r\n    }\r\n    inputName = event=>{\r\n        const info = event.target.value;\r\n        this.setState({userName:info});\r\n    }\r\n    inputPwd = event=>{\r\n        const info = event.target.value;\r\n        this.setState({password:info});\r\n    }\r\n    submit =()=>{ \r\n        this.props.dispatch({type:\"user/userLogin\",payload:{\r\n            name:this.state.userName,password:this.state.password\r\n        }})\r\n        // const { dispatch } = this.props\r\n        // this.props.dispatch({type:\"USER_LOGIN\"},{name:this.state.userName,password:this.state.password})\r\n        // userLogin(dispatch, {name:this.state.userName,password:this.state.password});\r\n    }\r\n    // static getInitialProps({ store, isServer, pathname, query }) {\r\n    //     store.dispatch({ type: \"FOO\", payload: \"foo\" }); // component will be able to read from store's state when rendered\r\n    //    return { custom: \"custom\" }; // you can pass some custom props to component from here\r\n    //   }\r\n    static async getInitialProps(props) {\r\n        // first time run in server side\r\n        // other times run in client side ( client side init with default props\r\n        // console.log('get init props');\r\n        const {\r\n          pathname, query, isServer, store,\r\n        } = props;\r\n        // dispatch effects to fetch data here\r\n        return {\r\n          // dont use store as property name, it will confilct with initial store\r\n          pathname, query, isServer, dvaStore: store,\r\n        };\r\n      }\r\n    render(){\r\n        const {user}  = this.props;\r\n        const {userInfo} = user;\r\n        console.log(userInfo);\r\n        return <Fragment>\r\n        <label>姓名：</label>\r\n        <Input onChange={this.inputName}></Input>\r\n        <label>密码：</label>\r\n        <Input type=\"password\" onChange={this.inputPwd}></Input>\r\n        <Button onClick={this.submit}>提交</Button>\r\n        <div>Prop from Redux {this.props.foo}</div>\r\n        <div>Prop from getInitialProps {this.props.custom}</div>\r\n\r\n        <p>{userInfo&&userInfo.name? userInfo.name:'' }</p>\r\n        </Fragment>\r\n    }\r\n}\r\n\r\n// export default connect()(Login);\r\n// const mapStateToProps = state => {\r\n//     const {userInfo}  = state;\r\n//     return {userInfo};\r\n// }\r\n\r\nexport default WithDva((state)=>{return {user:state.user};})(Login);\r\n// export default connect(mapStateToProps)(Login);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAXA;AAYA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAfA;AAgBA;AAAA;AAAA;AACA;AAAA;AADA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AArBA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AAiCA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAMA;;;AAhCA;AACA;AACA;AACA;;;;AACA;;;;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AACA;;;;;;;;;;;;;;;;;;AArCA;AA4DA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}